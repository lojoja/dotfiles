# roles/legacy/tasks/main.yml
---
- name: Check for legacy installation
  ansible.builtin.stat:
    path: "{{ legacy_repository_path }}"
    get_checksum: no
  register: repo

- block:
    - name: Remove legacy files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ legacy_files }}"

    - name: Find legacy symlinks
      ansible.builtin.stat:
        path: "{{ item }}"
        get_checksum: no
      loop: "{{ legacy_symlinks }}"
      register: symlink

    - name: Remove legacy symlinks
      ansible.builtin.file:
        path: "{{ item.item }}"
        state: absent
      when: item.stat.islnk is defined and item.stat.islnk and item.stat.lnk_source.startswith(legacy_repository_path)
      loop: "{{ symlink.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Remove legacy repository
      ansible.builtin.file:
        path: "{{ legacy_repository_path }}"
        state: absent
  when: repo.stat.isdir is defined and repo.stat.isdir

- name: Find legacy unmanaged package symlinks
  ansible.builtin.stat:
    path: "{{ item }}"
    get_checksum: no
  loop: "{{ legacy_package_symlinks }}"
  register: pkg_symlink

- name: Remove legacy unmanaged package symlinks
  ansible.builtin.file:
    path: "{{ item.item }}"
    state: absent
  when: item.stat.islnk is defined and item.stat.islnk and (item.stat.lnk_source | regex_search(legacy_package_match))
  loop: "{{ pkg_symlink.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Remove legacy unmanaged package group directories
  ansible.builtin.file:
    path: "{{ legacy_package_opt_path }}/{{ item }}"
    state: absent
  loop: "{{ legacy_package_groups }}"
