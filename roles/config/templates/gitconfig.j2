{{ ansible_managed | comment }}

[core]
  excludesfile = {{ config_git_ignore }}
  autocrlf = input
  editor = {{ config_git_config_core_editor }}
[color]
  ui = auto
[color "branch"]
  current = red
  local = yellow
  remote = green
[color "diff"]
  meta = cyan
  frag = magenta
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[alias]
  st = status -sb
  ci = commit
  co = checkout
  br = branch
  cp = cherry-pick
  cps = cherry-pick -s
  today = diff @{yesterday}.. --stat
  meh = commit --amend
  wdiff = diff --word-diff=color
  wshow = show --word-diff=color
  lasttag = describe --tags --abbrev=0
  branches = branch -vv
  getbranch = "!x() { git co origin/$1 -b $1; }; x"
  fixbranch = "!x() { b=`git symbolic-ref -q --short HEAD` && git rebase --onto $b main $1 && git diff --stat $b && git checkout $b; }; x"
  autotrack = "!x() { b=`git symbolic-ref -q --short HEAD` && git branch -u \"origin/$b\" || echo \"error: not a branch\"; }; x"
  slog = log --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
  glog = log --graph --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
  gflog = log -p --cc --graph --decorate
  wtf = log --pretty=format:"%C(auto,yellow)%h%C(auto)%d%C(auto,reset)\\ by\\ %C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)%n\\ %s%n" --stat
  unci = reset HEAD^
  uncommit = reset HEAD^
  ls = ls-files
        rup = !git remote update `git rev-parse --symbolic-full-name HEAD@{u}|cut -d/ -f3`
  in = !git wtf HEAD..HEAD@{u}
  out = !git wtf HEAD@{u}..HEAD
  killbranches = !git branch | grep -v '\\bmain\\b' | xargs git branch -d 2> /dev/null
  sync = !git pull --rebase && git push
  down = "!git remote update; git pull --ff-only"
  comerge = "!x() { target=`git symbolic-ref HEAD`; git co $1; git merge $target; }; x"
  pill = pull
  ours = "!f() { git checkout --ours -- $@ && git add -- $@; }; f"
  theirs = "!f() { git checkout --theirs -- $@ && git add -- $@; }; f"
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  authors = shortlog -sn
  serve = daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/
  serveall = daemon --verbose --export-all --base-path=. --reuseaddr .
  addpr = "!f() { git fetch origin pull/$1/head:pr/$1; }; f"
  addprx = "!f() { b=`git symbolic-ref -q --short HEAD` && \
    echo \"Making branch for pull request #$1 [pr/$1]\" && \
    git fetch origin pull/$1/head:pr/$1 && \
    echo \"Rebasing pr/$1 onto $b...\" && \
    git fetch -q -f origin pull/$1/merge:refs/PR_MERGE_HEAD && \
    git rebase -q --onto $b PR_MERGE_HEAD^ pr/$1 && \
    git checkout -q $b && echo && \
    git diff --stat $b..pr/$1 && echo && \
    git log --oneline $b..pr/$1; \
    git update-ref -d refs/PR_MERGE_HEAD; \
    }; f"
[instaweb]
  httpd=webrick
[push]
  default=current
[pull]
  rebase=true
[diff]
  algorithm = {{ config_git_config_diff_algorithm }}
[diff "sops"]
  textconv = cat
[credential]
  helper = {{ config_git_config_credential_helper }}
[init]
  defaultBranch = {{ config_git_config_init_default_branch }}
[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
[filter "sops"]
  required = true
  clean = {{ config_git_config_filter_sops }} clean %f
  smudge = {{ config_git_config_filter_sops }} smudge %f
[gpg]
  format = ssh
[gpg "ssh"]
  allowedSignersFile = {{ config_git_signers }}
[commit]
  gpgsign = true
[tag]
  gpgsign = true
[user]
  name = {{ config_git_account.user_name }}
  email = {{ config_git_account.user_email }}
  signingkey = {{ ssh_dir }}/{{ config_git_account.user_key.file }}.pub
{% if config_git_account_alt.user_name %}
[includeIf "gitdir:{{ config_git_config_alt_user_dir }}/"]
  path = {{ config_git_config_alt }}
  {%- for git_url in config_git_config_urls %}

[url "{{ git_url.dest }}"]
  insteadOf = {{ git_url.src }}
  pushInsteadOf = {{ git_url.src }}
  insteadOf = git@{{ git_url.src }}
  pushInsteadOf = git@{{ git_url.src }}
  {%- endfor -%}
{% endif %}
